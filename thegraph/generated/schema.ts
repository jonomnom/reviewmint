// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Skill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Skill entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Skill must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Skill", id.toString(), this);
    }
  }

  static load(id: string): Skill | null {
    return changetype<Skill | null>(store.get("Skill", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get skill(): string {
    let value = this.get("skill");
    return value!.toString();
  }

  set skill(value: string) {
    this.set("skill", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get totalRatings(): BigInt {
    let value = this.get("totalRatings");
    return value!.toBigInt();
  }

  set totalRatings(value: BigInt) {
    this.set("totalRatings", Value.fromBigInt(value));
  }

  get NumOfRatings(): BigInt {
    let value = this.get("NumOfRatings");
    return value!.toBigInt();
  }

  set NumOfRatings(value: BigInt) {
    this.set("NumOfRatings", Value.fromBigInt(value));
  }
}

export class Review extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Review entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Review must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Review", id.toString(), this);
    }
  }

  static load(id: string): Review | null {
    return changetype<Review | null>(store.get("Review", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rating(): BigInt {
    let value = this.get("rating");
    return value!.toBigInt();
  }

  set rating(value: BigInt) {
    this.set("rating", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get skill(): string {
    let value = this.get("skill");
    return value!.toString();
  }

  set skill(value: string) {
    this.set("skill", Value.fromString(value));
  }
}
